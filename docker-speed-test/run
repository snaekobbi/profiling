#!/bin/bash
set -x

if [ "$GIT_COMMIT" = "" ]; then
    # Script is often started with daisy/pipeline repo as working directory (at least in Jenkins)
    GIT_COMMIT="`git rev-parse HEAD 2>/dev/null`"
fi

if [ "$GIT_COMMIT" != "" ]; then
    # Get the remotes containing this commit so that we can send commit status to all repos
    REMOTES="`git branch -r | grep -v subrepo | grep -v "[^ ] " | xargs git branch -r --contains $GIT_COMMIT | sed 's/^ *//' | sed 's/\/.*//' | sort | uniq | sed 's/[\r\n]/\n/g' | xargs -L 1 git remote get-url | sed 's/.*\/\([^/]*\/[^/]*\)$/\1/'`"
fi

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd $DIR

if [ "$GITHUB_STATUS_ENABLE" = "" ]; then
    GITHUB_STATUS_ENABLE=""
fi
if [ "$GIT_COMMIT" = "" ]; then
    echo "GIT_COMMIT environment variable not available; disabling git commit status updates."
    GITHUB_STATUS_ENABLE=""
fi

if [ "$GITHUB_STATUS_CONTEXT" = "" ]; then
    GITHUB_STATUS_CONTEXT="continuous-speed-test/dtbook-to-pef"
fi

docker build .
IMAGE_ID=$(docker build . | tail -n 1 | sed 's/.* //')

if [ "$1" = "" ]; then
    if [ "$GIT_COMMIT" = "" ]; then
        echo "No commit/tag/branch provided; using 'master'"
        GIT_COMMIT="master"
    fi
else
    GIT_COMMIT="$1"
fi

if [ "$GITHUB_STATUS_ENABLE" != "" ]; then
    for REMOTE in $REMOTES; do
        curl "https://api.github.com/repos/$REMOTE/statuses/$GIT_COMMIT?access_token=$GITHUB_ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -X POST \
            -d "{\"state\": \"pending\", \"description\": \"Started speed test\", \"context\": \"$GITHUB_STATUS_CONTEXT\"}"
    done
fi

LOGFILE="`tempfile`"
docker run -i --rm \
            --env GIT_COMMIT=$GIT_COMMIT \
            --env MAX_TIMEOUT="$MAX_TIMEOUT" \
            --env SUCCESS_TIME="$SUCCESS_TIME" \
            $IMAGE_ID | tee $LOGFILE

# Create max 140 character long multiline status message usable for github commit status. Format as:
# 123456s                         <-- total time used to compare across commits
# 1.9K: 1000s                     <-- first convertion time
# 497K: 1000s                     <-- second conversion time
# 955K: 1000s                     <-- third conversion time
# 2.4M: 1000s                     <-- fourth conversion time
# 7.0M: 1000s 1000s 1000s 1000s   <-- fifth conversion time(s)
# 7.0M parallel x4: 4000s         <-- total time running in parallel

TEMPFILE="`tempfile`"
SHORT_ERROR=""
if [ "`cat $LOGFILE | grep "^[^ ]* Pipeline 2: [0-9]*s" | sed 's/.* //' | grep -v success | wc -l`" != "0" ]; then
    SHORT_ERROR="`cat $LOGFILE | grep -i '[^ ]*\[error\]' | sed 's/\([a-zA-Z0-9:]\)\/[^ \t]*\/\([a-z0-9]\)/\1\/\2/g' | sed 's/[^a-zA-Z0-9 \t]/ /g' | sed 's/[ \t][ \t]*/ /g' | sed 's/\([^ \t]\{3\}\)[^ \t]*\([^ \t]\{3\}\)/\1\2/g' | sed 's/\(^\| \)err\(or\)\?\( \|$\)/\2/ig' | sed 's/\(^ *\| *$\)//' | sed 's/^[0-9]*//' | awk '!seen[$0]++' | sed 's/^\(.\{65\}\).*/\1/' | tr '\n' ' ' | sed 's/^\(.\{65\}\).*\(.\{65\}\)$/\1 \2/'`"
fi
cat $LOGFILE | grep '^Total test time:' | awk '{print $4}' > $TEMPFILE
echo "`ls -lh src/resources/552974.xml | awk '{print $5}'`: `cat $LOGFILE | grep 552974 | grep '^Speed test' | grep -v parallel | sed 's/.*://' | awk '{print $1}' | paste -s -d" "`" >> $TEMPFILE
echo "`ls -lh src/resources/552739.xml | awk '{print $5}'`: `cat $LOGFILE | grep 552739 | grep '^Speed test' | grep -v parallel | sed 's/.*://' | awk '{print $1}' | paste -s -d" "`" >> $TEMPFILE
echo "`ls -lh src/resources/553184.xml | awk '{print $5}'`: `cat $LOGFILE | grep 553184 | grep '^Speed test' | grep -v parallel | sed 's/.*://' | awk '{print $1}' | paste -s -d" "`" >> $TEMPFILE
echo "`ls -lh src/resources/554664.xml | awk '{print $5}'`: `cat $LOGFILE | grep 554664 | grep '^Speed test' | grep -v parallel | sed 's/.*://' | awk '{print $1}' | paste -s -d" "`" >> $TEMPFILE
echo "`ls -lh src/resources/501035.xml | awk '{print $5}'`: `cat $LOGFILE | grep 501035 | grep '^Speed test' | grep -v parallel | sed 's/.*://' | awk '{print $1}' | paste -s -d" "`" >> $TEMPFILE
cat $LOGFILE | grep '^Speed test' | grep parallel | awk '{print $8 " " $3 " " $4 ": " $9}' | sed 's/)://' >> $TEMPFILE

if [ "`cat $LOGFILE | grep "^Speed test" | sed 's/.* //' | grep 'failure' | head -n 1 | wc -l`" = "1" ]; then
    STATUS="failure"
else
    if [ "`cat $LOGFILE | grep "^Speed test" | sed 's/.* //' | grep 'error' | head -n 1 | wc -l`" = "1" ]; then
        STATUS="error"
    else
        if [ "`cat $LOGFILE | grep "^Speed test" | sed 's/.* //' | grep 'success' | head -n 1 | wc -l`" = "1" ]; then
            STATUS="success"
        else
            STATUS="failure"
        fi
    fi
fi

DESCRIPTION="`cat $TEMPFILE | grep -v ': *$' | paste -s -d"#" | sed 's/#/\\\\n/g'`"
if [ "$SHORT_ERROR" != "" ]; then
    DESCRIPTION="$SHORT_ERROR"
fi
if [ "$GITHUB_STATUS_ENABLE" != "" ]; then
    for REMOTE in $REMOTES; do
        curl "https://api.github.com/repos/$REMOTE/statuses/$GIT_COMMIT?access_token=$GITHUB_ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -X POST \
            -d "{\"state\": \"$STATUS\", \"description\": \"`echo $DESCRIPTION`\", \"context\": \"$GITHUB_STATUS_CONTEXT\"}"
    done
else
    echo
    echo "Status not sent to GitHub. Here's the JSON if you want to do it manually:"
    echo "{\"state\": \"$STATUS\", \"description\": \"`echo $DESCRIPTION`\", \"context\": \"$GITHUB_STATUS_CONTEXT\"}"
fi
